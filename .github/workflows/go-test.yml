name: Go Test
on:
  workflow_call:
    inputs:
      packages:
        description: "A comma-separated list of packages to be tested."
        type: string
        required: false
        default: "./..."
      test-on:
        description: "A comma-separated list of platforms for which to build the image."
        type: string
        required: false
        default: "ubuntu-latest"
      go-versions:
        description: "A comma-separated list of Go versions to test against. Defaults to latest."
        type: string
        required: false
        default: "go.mod"
      tags:
        description: "A list of build tags for the test binary."
        type: string
        required: false
        default: ""
      short:
        description: "Only run short tests."
        type: boolean
        required: false
        default: false

jobs:
  prepare:
    name: Prepare Tests
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.json }}
      test-on: ${{ steps.platforms.outputs.json }}
      go-versions: ${{ steps.versions.outputs.json }}
    steps:
      - name: Prepare Packages
        id: packages
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          echo "$PACKAGES" | jq --raw-input --compact-output 'split(",") | map(gsub("^\\s+|\\s+$";""))' >> "$GITHUB_OUTPUT"
        env:
          PACKAGES: ${{ inputs.packages }}
      - name: Prepare Test Platforms
        id: platforms
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          echo "$PLATFORMS" | jq --raw-input --compact-output 'split(",") | map(gsub("^\\s+|\\s+$";""))' >> "$GITHUB_OUTPUT"
        env:
          PLATFORMS: ${{ inputs.test-on }}
      - name: Prepare Go Versions
        id: versions
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          echo "$VERSIONS" | jq --raw-input --compact-output 'split(",") | map(gsub("^\\s+|\\s+$";""))' >> "$GITHUB_OUTPUT"
        env:
          VERSIONS: ${{ inputs.go-versions }}

  test:
    name: Run Tests${{ contains(inputs.packages, ',') && format(' on {0}', matrix.package) || '' }} (${{ matrix.test-on }}, ${{ !endsWith(matrix.go-version, 'go.mod') && 'Go ' || '' }}${{ matrix.go-version }})
    needs: [ prepare ]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.prepare.outputs.packages) }}
        test-on: ${{ fromJSON(needs.prepare.outputs.test-on) }}
        go-version: ${{ fromJSON(needs.prepare.outputs.go-versions) }}
    runs-on: ${{ matrix.test-on }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ !endsWith(matrix.go-version, 'go.mod') && matrix.go-version || null }}
          go-version-file: ${{ endsWith(matrix.go-version, 'go.mod') && matrix.go-version || null }}
      - name: Fetch Dependencies
        run: go mod download
      - name: Run Tests
        run: |
          go test --tags="$TAGS" ${{ inputs.short && '-short' || '' }} "$PACKAGE"
        env:
          TAGS: ${{ inputs.tags }}
          PACKAGE: ${{ matrix.package }}
